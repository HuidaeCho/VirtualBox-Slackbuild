--- vboxdrv.sh_stock	2023-03-14 21:01:35.329737171 -0400
+++ vboxdrv.sh	2023-03-14 21:59:34.383319137 -0400
@@ -316,93 +316,6 @@
     modinfo "$mod" 2>/dev/null | grep -e "^version:" | tr -s ' ' | cut -d " " -f3
 }
 
-# Reads kernel configuration option.
-kernel_get_config_opt()
-{
-    opt_name="$1"
-    [ -n "$opt_name" ] || return
-
-    # Check if there is a kernel tool which can extract config option.
-    if test -x /lib/modules/"$KERN_VER"/build/scripts/config; then
-        /lib/modules/"$KERN_VER"/build/scripts/config \
-            --file /lib/modules/"$KERN_VER"/build/.config \
-            --state "$opt_name" 2>/dev/null
-    elif test -f /lib/modules/"$KERN_VER"/build/.config; then
-        # Extract config option manually.
-        grep "$opt_name" /lib/modules/"$KERN_VER"/build/.config | sed -e "s/^$opt_name=//" -e "s/\"//g"
-    fi
-}
-
-# Reads CONFIG_MODULE_SIG_HASH from kernel config.
-kernel_module_sig_hash()
-{
-    kernel_get_config_opt "CONFIG_MODULE_SIG_HASH"
-}
-
-# Returns "1" if kernel module signature hash algorithm
-# is supported by us. Or empty string otherwise.
-module_sig_hash_supported()
-{
-    sig_hashalgo="$1"
-    [ -n "$sig_hashalgo" ] || return
-
-    # Go through supported list.
-    [    "$sig_hashalgo" = "sha1"   \
-      -o "$sig_hashalgo" = "sha224" \
-      -o "$sig_hashalgo" = "sha256" \
-      -o "$sig_hashalgo" = "sha384" \
-      -o "$sig_hashalgo" = "sha512" ] || return
-
-    echo "1"
-}
-
-# Returns "1" if module is signed and signature can be verified
-# with public key provided in DEB_PUB_KEY. Or empty string otherwise.
-module_signed()
-{
-    mod="$1"
-    [ -n "$mod" ] || return
-
-    extraction_tool=/lib/modules/"$(uname -r)"/build/scripts/extract-module-sig.pl
-    mod_path=$(module_path "$mod" 2>/dev/null)
-    openssl_tool=$(which openssl 2>/dev/null)
-    # Do not use built-in printf!
-    printf_tool=$(which printf 2>/dev/null)
-
-    # Make sure all the tools required for signature validation are available.
-    [ -x "$extraction_tool" ] || return
-    [ -n "$mod_path"        ] || return
-    [ -n "$openssl_tool"    ] || return
-    [ -n "$printf_tool"     ] || return
-
-    # Make sure openssl can handle hash algorithm.
-    sig_hashalgo=$(modinfo -F sig_hashalgo "$mod" 2>/dev/null)
-    [ "$(module_sig_hash_supported $sig_hashalgo)" = "1" ] || return
-
-    # Generate file names for temporary stuff.
-    mod_pub_key=$(mktemp -u)
-    mod_signature=$(mktemp -u)
-    mod_unsigned=$(mktemp -u)
-
-    # Convert public key in DER format into X509 certificate form.
-    "$openssl_tool" x509 -pubkey -inform DER -in "$DEB_PUB_KEY" -out "$mod_pub_key" 2>/dev/null
-    # Extract raw module signature and convert it into binary format.
-    "$printf_tool" \\x$(modinfo -F signature "$mod" | sed -z 's/[ \t\n]//g' | sed -e "s/:/\\\x/g") 2>/dev/null > "$mod_signature"
-    # Extract unsigned module for further digest calculation.
-    "$extraction_tool" -0 "$mod_path" 2>/dev/null > "$mod_unsigned"
-
-    # Verify signature.
-    rc=""
-    "$openssl_tool" dgst "-$sig_hashalgo" -binary -verify "$mod_pub_key" -signature "$mod_signature" "$mod_unsigned" 2>&1 >/dev/null && rc="1"
-    # Clean up.
-    rm -f $mod_pub_key $mod_signature $mod_unsigned
-
-    # Check result.
-    [ "$rc" = "1" ] || return
-
-    echo "1"
-}
-
 # Returns "1" if externally built module is available in the system and its
 # version and revision number do match to current VirtualBox installation.
 # Or empty string otherwise.
@@ -604,153 +517,10 @@
     fi
 }
 
-cleanup()
-{
-    # If this is set, only remove kernel modules for no longer installed
-    # kernels.  Note that only generated kernel modules should be placed
-    # in /lib/modules/*/misc.  Anything that we should not remove automatically
-    # should go elsewhere.
-    only_old="${1}"
-    for i in /lib/modules/*; do
-        # Check whether we are only cleaning up for uninstalled kernels.
-        test -n "${only_old}" && test -e "${i}/kernel/drivers" && continue
-
-        unset do_update
-        for j in $MODULE_LIST; do
-            for mod_ext in ko ko.gz ko.xz ko.zst; do
-                test -f "${i}/misc/${j}.${mod_ext}" && do_update=1 && rm -f "${i}/misc/${j}.${mod_ext}"
-            done
-        done
-
-        # Trigger depmod(8) only in case if directory content was modified
-        # and save a bit of run time.
-        test -n "$do_update" && depmod -a "$(basename "$i")" && sync
-
-        # Remove the kernel version folder if it was empty except for us.
-        test   "`echo ${i}/misc/* ${i}/misc/.?* ${i}/* ${i}/.?*`" \
-             = "${i}/misc/* ${i}/misc/.. ${i}/misc ${i}/.." &&
-            rmdir "${i}/misc" "${i}"  # We used to leave empty folders.
-    done
-}
-
 # setup_script
 setup()
 {
-    begin_msg "Building VirtualBox kernel modules" console
-    log "Building the main VirtualBox module."
-
-    # Detect if kernel was built with clang.
-    unset LLVM
-    vbox_cc_is_clang=$(kernel_get_config_opt "CONFIG_CC_IS_CLANG")
-    if test "${vbox_cc_is_clang}" = "y"; then
-        log "Using clang compiler."
-        export LLVM=1
-    fi
-
-    if ! myerr=`$BUILDINTMP \
-        --save-module-symvers /tmp/vboxdrv-Module.symvers \
-        --module-source "$MODULE_SRC/vboxdrv" \
-        --no-print-directory install 2>&1`; then
-        "${INSTALL_DIR}/check_module_dependencies.sh" || exit 1
-        log "Error building the module:"
-        module_build_log "$myerr"
-        failure "Look at $LOG to find out what went wrong"
-    fi
-    log "Building the net filter module."
-    if ! myerr=`$BUILDINTMP \
-        --use-module-symvers /tmp/vboxdrv-Module.symvers \
-        --module-source "$MODULE_SRC/vboxnetflt" \
-        --no-print-directory install 2>&1`; then
-        log "Error building the module:"
-        module_build_log "$myerr"
-        failure "Look at $LOG to find out what went wrong"
-    fi
-    log "Building the net adaptor module."
-    if ! myerr=`$BUILDINTMP \
-        --use-module-symvers /tmp/vboxdrv-Module.symvers \
-        --module-source "$MODULE_SRC/vboxnetadp" \
-        --no-print-directory install 2>&1`; then
-        log "Error building the module:"
-        module_build_log "$myerr"
-        failure "Look at $LOG to find out what went wrong"
-    fi
-    if test -e "$MODULE_SRC/vboxpci"; then
-        log "Building the PCI pass-through module."
-        if ! myerr=`$BUILDINTMP \
-            --use-module-symvers /tmp/vboxdrv-Module.symvers \
-            --module-source "$MODULE_SRC/vboxpci" \
-            --no-print-directory install 2>&1`; then
-            log "Error building the module:"
-            module_build_log "$myerr"
-            failure "Look at $LOG to find out what went wrong"
-        fi
-    fi
-    rm -f /etc/vbox/module_not_compiled
-    depmod -a
-    sync
-    succ_msg "VirtualBox kernel modules built"
-
-    # Secure boot on Ubuntu, Debian and Oracle Linux.
-    if test -n "$HAVE_SEC_BOOT"; then
-        begin_msg "Signing VirtualBox kernel modules" console
-
-        # Generate new signing key if needed.
-        [ -n "$HAVE_UPDATE_SECUREBOOT_POLICY_TOOL" ] && SHIM_NOTRIGGER=y update-secureboot-policy --new-key
-
-        # Check if signing keys are in place.
-        if test ! -f "$DEB_PUB_KEY" || ! test -f "$DEB_PRIV_KEY"; then
-            # update-secureboot-policy tool present in the system, but keys were not generated.
-            [ -n "$HAVE_UPDATE_SECUREBOOT_POLICY_TOOL" ] && fail_msg "
-
-update-secureboot-policy tool does not generate signing keys
-in your distribution, see below on how to generate them manually
-"
-
-            # update-secureboot-policy not present in the system, recommend generate keys manually.
-            failure "
-
-System is running in Secure Boot mode, however your distribution
-does not provide tools for automatic generation of keys needed for
-modules signing. Please consider to generate and enroll them manually:
-
-    sudo mkdir -p /var/lib/shim-signed/mok
-    sudo openssl req -nodes -new -x509 -newkey rsa:2048 -outform DER -addext \"extendedKeyUsage=codeSigning\" -keyout $DEB_PRIV_KEY -out $DEB_PUB_KEY
-    sudo mokutil --import $DEB_PUB_KEY
-    sudo reboot
-
-Restart \"rcvboxdrv setup\" after system is rebooted
-"
-        fi
-
-        # Check if signing tool is available.
-        [ -n "$SIGN_TOOL" ] || failure "Unable to find signing tool"
-
-        # Get kernel signature hash algorithm from kernel config and validate it.
-        sig_hashalgo=$(kernel_module_sig_hash)
-        [ "$(module_sig_hash_supported $sig_hashalgo)" = "1" ] \
-            || failure "Unsupported kernel signature hash algorithm $sig_hashalgo"
-
-        # Sign modules.
-        for i in $MODULE_LIST; do
-            "$SIGN_TOOL" "$sig_hashalgo" "$DEB_PRIV_KEY" "$DEB_PUB_KEY" \
-                /lib/modules/"$KERN_VER"/misc/"$i".ko 2>/dev/null || failure "Unable to sign $i.ko"
-        done
-
-        # Enroll signing key if needed.
-        if test -n "$HAVE_UPDATE_SECUREBOOT_POLICY_TOOL"; then
-            # update-secureboot-policy "expects" DKMS modules.
-            # Work around this and talk to the authors as soon
-            # as possible to fix it.
-            mkdir -p /var/lib/dkms/vbox-temp
-            update-secureboot-policy --enroll-key 2>/dev/null ||
-                begin_msg "Failed to enroll secure boot key." console
-            rmdir -p /var/lib/dkms/vbox-temp 2>/dev/null
-
-            # Indicate that key has been enrolled and reboot is needed.
-            HAVE_DEB_KEY=true
-        fi
-        succ_msg "Signing completed"
-    fi
+    echo "Not implemented! Please use the virtualbox-kernel.SlackBuild available at SlackBuilds.org instead."
 }
 
 dmnstatus()
